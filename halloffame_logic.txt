Goal: Have the bot repost posts from an input channel to an output channel if enough unique users react to it - 
	it is essentially an automated hall of fame.

On bootup:
(1) Parse Output channel and create a Data structure to store all of its posts via:
	(a) the Url of their embedded media (as the key)
	(b) a true Flag to signify that it has been reposted to the Output channel
	(c) a Count of its unique reactors (this can be built from the emoji reactions on the Output post)

On reaction to a Post in the Input channel:
(1) Check if the reaction
	- occcured in the correct channel,
	- is on an image/video post (maybe allow text if it's in a quote?)

(2) Check Data structure for the Post (via its Url)
	(a) if there is no entry, add an entry and set its Flag to false and its Count to 0
		(i) otherwise, continue
	(b) check if the Reactor appears in the List of unique reactors
		(i) add the Reactor to the List if it is not already listed, or if the List doesn't exist yet (create the List first); update the Count
			(1) if the Count != the length of the List, go through the Post's reactions and construct the List; update Count
			(2) if the Count >= the Threshold, Repost and set Flag to true
			(3) else if the number of unique users in the List are less than the Threshold, return
		(ii) else if the Reactor already appears in the List, return 

(3) Repost
	(a) Copy the Url and send a new message containing the Url in the Output channel
	(b) Tag the original poster
	(c) The Url is the identifier that allows the bot to
		(i) reconstruct the list of flagged posts even after a restart
		(ii) recognize the connection between a post in the input Channel and its counterpart in the output Channel
		Note: This means that if multiple posts have the exact same Url, the reactions and Lists will be fragmented and inaccurate. Hence the following "On Post" section
	(d) It could be fun to have the bot react to the repost with number emojis == 
		the number of unique reactors to the original post

On Post to Input Channel:
(1) Check if its Url appears in the Data structure
	(a) if true, delete Post and post the error message "Sorry, this image/video has been posted already; your submission has been deleted"
	(b) else, return